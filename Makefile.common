SHELL=/bin/bash

pwd:=$(shell pwd)/
bin:=${pwd}bin/
nproc:=$(shell nproc)

# set this to nothing to get system environment
envCmdPy2?=source $${DEV_VIRTUALENV_DIR}/bin/activate &&
envCmd?=source $${DEV_VIRTUALENV_DIR_PY3}/bin/activate &&

pipInstall:=pip install --trusted-host pypi.oxfordnanolabs.local --index-url https://pypi.oxfordnanolabs.local/simple/
inTmpEnvPy2:=source environment && source $${TMP_VIRTUALENV_DIR}/bin/activate &&
inTmpEnv:=source environment && source $${TMP_VIRTUALENV_DIR_PY3}/bin/activate &&
inDevEnvPy2:=source environment && ${envCmdPy2}
inDevEnv:=source environment && ${envCmd}
inEnv:=source environment &&


.PHONY: default
default: testInEnv

.PHONY: test
test: testNoEnv

.PHONY: testInEnv
testInEnv: unitTest

.PHONY: testNoEnv
testNoEnv: unitTestNoEnv


pyTestArgs?=-n auto
unitset?=
unitTestCmd:=${pipInstall} -r test/unit/requirements.txt && cd test/unit && py.test ${pyTestArgs} -v -s --fulltrace ${unitset}
.PHONY: unitTestPy2 unitTestFromScratchPy2
unitTestPy2:
	${inDevEnvPy2} ${unitTestCmd}
unitTest:
	${inDevEnv} ${unitTestCmd}
unitTestFromScratchPy2: cleanTmpEnvWithWheelInstalledPy2
	${inTmpEnvPy2} ${unitTestCmd}
unitTestFromScratch: cleanTmpEnvWithWheelInstalled
	${inTmpEnv} ${unitTestCmd}
unitTestNoEnv:
	${unitTestCmd}


.PHONY: cleanDevEnvPy2
cleanDevEnvPy2: cleanVirtualenvPy2
	./setup-dev-env.sh

.PHONY: cleanDevEnv
cleanDevEnv: cleanVirtualenv
	PY3=True ./setup-dev-env.sh

.PHONY: cleanVirtualenvPy2
cleanVirtualenvPy2:
	${inEnv} rm -rf $${DEV_VIRTUALENV_DIR}
	./setup-virtualenv.sh

.PHONY: cleanVirtualenv
cleanVirtualenv:
	${inEnv} rm -rf $${DEV_VIRTUALENV_DIR_PY3}
	PY3=True ./setup-virtualenv.sh

.PHONY: checkout
checkout:
	git submodule update --init

.PHONY: ciCheckout
ciCheckout:
	rm -rf data
	for i in 1 2 3 4 5; do git submodule update --init && break || sleep 9; done

.PHONY: cleanTmpEnvPy2
cleanTmpEnvPy2:
	source environment && rm -rf $${TMP_VIRTUALENV_DIR} && virtualenv $${TMP_VIRTUALENV_DIR}
	${inTmpEnvPy2} pip install pip --upgrade

.PHONY: cleanTmpEnv
cleanTmpEnv:
	source environment && rm -rf $${TMP_VIRTUALENV_DIR_PY3} && virtualenv -p python3 $${TMP_VIRTUALENV_DIR_PY3}
	${inTmpEnv} pip install pip --upgrade

.PHONY: cleanTmpEnvWithDepsPy2
cleanTmpEnvWithDepsPy2: cleanTmpEnvPy2
	${inTmpEnvPy2} ${pipInstall} -r scripts/requirements.txt && \
	            ${pipInstall} -r requirements.txt

.PHONY: cleanTmpEnvWithDeps
cleanTmpEnvWithDeps: cleanTmpEnv
	${inTmpEnv} ${pipInstall} -r scripts/requirements.txt && \
	               ${pipInstall} -r requirements.txt

.PHONY: wheelPy2
wheelPy2: cleanTmpEnvWithDepsPy2
	${inTmpEnvPy2} python setup.py bdist_wheel
	ls -l dist/*.whl

.PHONY: wheel
wheel: cleanTmpEnvWithDeps
	${inTmpEnv} python setup.py bdist_wheel
	ls -l dist/*.whl

.PHONY: cleanTmpEnvWithWheelInstalledPy2
cleanTmpEnvWithWheelInstalledPy2: cleanTmpEnvPy2
	${inTmpEnvPy2} ${pipInstall} --find-links=dist/ "sloika==${projectVersion}"

.PHONY: cleanTmpEnvWithWheelInstalled
cleanTmpEnvWithWheelInstalled: cleanTmpEnv
	${inTmpEnv} ${pipInstall} --find-links=dist/ "sloika==${projectVersion}"


.PHONY: autopep8
autopep8:
	${inDevEnv} autopep8 --ignore E203 -i --max-line-length=120 ${pyFiles}

.PHONY: pep8
pep8:
	${inDevEnv} pep8 --ignore E203,E402 --max-line-length=120 ${pyFiles}


cmd?=echo "Set 'cmd' to command to run in dev env"
.PHONY: runInDevEnvPy2
runInDevEnvPy2:
	@${inDevEnvPy2} ${cmd}
.PHONY: runInTmpEnvPy2
runInTmpEnvPy2:
	@${inTmpEnvPy2} ${cmd}
.PHONY: runInTmpEnv
runInTmpEnv:
	@${inTmpEnv} ${cmd}

.PHONY: deb
deb: clean cleanTmpEnvPy2
	lsb_release  # must be installed for this target to work
	${inTmpEnvPy2} ${pipInstall} -r scripts/requirements.txt && \
	            ${pipInstall} -r requirements.txt && \
	            python setup.py --command-packages=stdeb.command sdist_dsc --debian-version 1~`lsb_release -cs` bdist_deb
	ls -l deb_dist/*.deb

.PHONY: clean
clean:
	(source environment && rm -rf $${BUILD_DIR})
	rm -rf dist/ deb_dist/ *.egg-info/
	find . -name '*.pyc' -delete
	find . -name '*.so' -delete

.PHONY: pp pullpush
pp: pullpush
pullpush:
	${MAKE} pep8
	cd data && git pull --rebase && git push
	git pull --rebase && git push

.PHONY: debDeps
debDeps: deps
	apt-get install -y \
	    python-stdeb dpkg-dev fakeroot lintian

.PHONY: python-future
python-future: cleanTmpEnvPy2
	mkdir -p deb_dist build
	cat requirements.txt | grep future > build/python-future.txt
	${inTmpEnvPy2} pip install py2deb
	${inTmpEnvPy2} py2deb -r deb_dist --name-prefix=python -- -r build/python-future.txt
	ls -l deb_dist/*.deb
	dpkg --info deb_dist/python-future*.deb

